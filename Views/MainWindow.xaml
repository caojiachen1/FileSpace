<ui:FluentWindow x:Class="FileSpace.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:FileSpace.Views"
        xmlns:models="clr-namespace:FileSpace.Models"
        xmlns:converters="clr-namespace:FileSpace.Converters"
        xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
        mc:Ignorable="d"
        Title="FileSpace - 文件管理器" Height="700" Width="1200"
        WindowStartupLocation="CenterScreen"
        ExtendsContentIntoTitleBar="True"
        WindowBackdropType="Mica">

    <ui:FluentWindow.Resources>
        <!-- Add missing converters -->
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        
        <!-- Add inverse boolean to visibility converter -->
        <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
        
        <!-- Add equality converter for comparing objects -->
        <converters:EqualityConverter x:Key="EqualityConverter"/>
        
        <!-- Custom expand/collapse toggle style with down arrow -->
        <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Width" Value="16"/>
            <Setter Property="Height" Value="16"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Border Width="16" Height="16" Background="Transparent">
                            <ui:SymbolIcon x:Name="ExpandIcon" 
                                           Symbol="ChevronDown24" 
                                           FontSize="12"
                                           Foreground="{DynamicResource TextFillColorSecondaryBrush}"
                                           HorizontalAlignment="Center"
                                           VerticalAlignment="Center"
                                           RenderTransformOrigin="0.5,0.5">
                                <ui:SymbolIcon.RenderTransform>
                                    <RotateTransform x:Name="ExpandIconTransform" Angle="-90"/>
                                </ui:SymbolIcon.RenderTransform>
                            </ui:SymbolIcon>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="ExpandIconTransform"
                                                           Storyboard.TargetProperty="Angle"
                                                           To="0"
                                                           Duration="0:0:0.2"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="ExpandIconTransform"
                                                           Storyboard.TargetProperty="Angle"
                                                           To="-90"
                                                           Duration="0:0:0.2"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="ExpandIcon" Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <!-- TreeView Item Style for dark mode -->
        <Style x:Key="DirectoryTreeViewItemStyle" TargetType="TreeViewItem">
            <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
            <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Padding" Value="2"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TreeViewItem">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="19" Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            
                            <!-- Expansion toggle button with down arrow -->
                            <ToggleButton x:Name="Expander" Grid.Column="0"
                                          ClickMode="Press"
                                          IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                          Visibility="{Binding HasSubDirectories, Converter={StaticResource BooleanToVisibilityConverter}}"
                                          Style="{StaticResource ExpandCollapseToggleStyle}"/>
                            
                            <!-- Content area -->
                            <Border x:Name="ContentBorder" Grid.Column="1" 
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Padding="{TemplateBinding Padding}"
                                    CornerRadius="3">
                                <ContentPresenter x:Name="PART_Header" 
                                                  ContentSource="Header"
                                                  HorizontalAlignment="Left"
                                                  VerticalAlignment="Center"/>
                            </Border>
                            
                            <!-- Child items -->
                            <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.Row="1"
                                            Margin="12,0,0,0"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="False">
                                <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="ContentBorder" Property="Background" Value="{DynamicResource SubtleFillColorSecondaryBrush}"/>
                            </Trigger>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="ContentBorder" Property="Background" Value="{DynamicResource AccentFillColorDefaultBrush}"/>
                                <Setter Property="Foreground" Value="{DynamicResource TextOnAccentFillColorPrimaryBrush}"/>
                            </Trigger>
                            <DataTrigger Binding="{Binding HasSubDirectories}" Value="False">
                                <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <Style x:Key="FileDataGridRowStyle" TargetType="DataGridRow">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#FF404040"/>
                </Trigger>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="#FF606060"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="FileDataGridCellStyle" TargetType="DataGridCell">
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}"/>
            <Setter Property="Padding" Value="8,4"/>
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
    </ui:FluentWindow.Resources>
    
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Title Bar -->
        <ui:TitleBar Grid.Row="0" Title="FileSpace" ShowMinimize="True" ShowMaximize="True" ShowClose="True"/>

        <!-- Menu Bar with Panel Toggle Buttons -->
        <Grid Grid.Row="1" Background="{DynamicResource ApplicationBackgroundBrush}" Margin="10,-10,10,0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            
            <!-- Main Menu -->
            <Menu Grid.Column="0" Background="Transparent">
            <MenuItem Header="文件(_F)">
                <MenuItem Header="搜索..." Command="{Binding ShowSearchWindowCommand}" InputGestureText="Ctrl+F">
                    <MenuItem.Icon>
                        <ui:SymbolIcon Symbol="Search24"/>
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Header="退出" Click="Exit_Click" InputGestureText="Alt+F4">
                    <MenuItem.Icon>
                        <ui:SymbolIcon Symbol="Dismiss24"/>
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="编辑(_E)">
                <MenuItem Header="复制" Command="{Binding CopyFilesCommand}" InputGestureText="Ctrl+C">
                    <MenuItem.Icon>
                        <ui:SymbolIcon Symbol="Copy24"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="剪切" Command="{Binding CutFilesCommand}" InputGestureText="Ctrl+X">
                    <MenuItem.Icon>
                        <ui:SymbolIcon Symbol="Cut24"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="粘贴" Command="{Binding PasteFilesCommand}" InputGestureText="Ctrl+V">
                    <MenuItem.Icon>
                        <ui:SymbolIcon Symbol="ClipboardPaste24"/>
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Header="全选" Command="{Binding SelectAllCommand}" InputGestureText="Ctrl+A">
                    <MenuItem.Icon>
                        <ui:SymbolIcon Symbol="Apps24"/>
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="查看(_V)">
                <MenuItem Header="刷新" Command="{Binding RefreshCommand}" InputGestureText="F5">
                    <MenuItem.Icon>
                        <ui:SymbolIcon Symbol="ArrowClockwise24"/>
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Header="面板">
                    <MenuItem Header="文件夹树" Command="{Binding ToggleLeftPanelCommand}" 
                              IsCheckable="True" IsChecked="{Binding IsLeftPanelVisible}">
                        <MenuItem.Icon>
                            <ui:SymbolIcon Symbol="Folder24"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="预览面板" Command="{Binding ToggleRightPanelCommand}" 
                              IsCheckable="True" IsChecked="{Binding IsRightPanelVisible}">
                        <MenuItem.Icon>
                            <ui:SymbolIcon Symbol="Eye24"/>
                        </MenuItem.Icon>
                    </MenuItem>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="工具(_T)">
                <MenuItem Header="文件夹分析..." Command="{Binding AnalyzeFolderCommand}">
                    <MenuItem.Icon>
                        <ui:SymbolIcon Symbol="Folder24"/>
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Header="设置..." Click="Settings_Click">
                    <MenuItem.Icon>
                        <ui:SymbolIcon Symbol="Settings24"/>
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
        </Menu>
            
            <!-- VS Code Style Panel Toggle Buttons -->
            <StackPanel Grid.Column="1" Orientation="Horizontal" VerticalAlignment="Center" Margin="0,0,10,0">
                <!-- Left Panel Toggle (Folder Tree) -->
                <ui:Button Command="{Binding ToggleLeftPanelCommand}" 
                           Width="32" Height="28" Margin="2,0"
                           ToolTip="切换文件夹树 (Alt+1)"
                           Background="Transparent"
                           BorderThickness="0">
                    <ui:Button.Content>
                        <Grid Width="20" Height="16">
                            <!-- VS Code style split icon with proper hollow effect -->
                            <Rectangle Width="8" Height="14" HorizontalAlignment="Left" VerticalAlignment="Center" 
                                       RadiusX="1" RadiusY="1">
                                <Rectangle.Style>
                                    <Style TargetType="Rectangle">
                                        <!-- Default: hollow (panel closed) -->
                                        <Setter Property="Fill" Value="Transparent"/>
                                        <Setter Property="Stroke" Value="{DynamicResource TextFillColorSecondaryBrush}"/>
                                        <Setter Property="StrokeThickness" Value="1"/>
                                        <Style.Triggers>
                                            <!-- Filled when panel is open -->
                                            <DataTrigger Binding="{Binding IsLeftPanelVisible}" Value="True">
                                                <Setter Property="Fill" Value="{DynamicResource AccentFillColorDefaultBrush}"/>
                                                <Setter Property="Stroke" Value="{DynamicResource AccentFillColorDefaultBrush}"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Rectangle.Style>
                            </Rectangle>
                            <Rectangle Width="10" Height="14" HorizontalAlignment="Right" VerticalAlignment="Center" 
                                       Fill="Transparent" Stroke="{DynamicResource TextFillColorSecondaryBrush}" 
                                       StrokeThickness="1" RadiusX="1" RadiusY="1"/>
                        </Grid>
                    </ui:Button.Content>
                    <ui:Button.Style>
                        <Style TargetType="ui:Button">
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="BorderThickness" Value="0"/>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource SubtleFillColorSecondaryBrush}"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </ui:Button.Style>
                </ui:Button>
                
                <!-- Right Panel Toggle (Preview) -->
                <ui:Button Command="{Binding ToggleRightPanelCommand}" 
                           Width="32" Height="28" Margin="2,0"
                           ToolTip="切换预览面板 (Alt+2)"
                           Background="Transparent"
                           BorderThickness="0">
                    <ui:Button.Content>
                        <Grid Width="20" Height="16">
                            <!-- VS Code style split icon with proper hollow effect -->
                            <Rectangle Width="10" Height="14" HorizontalAlignment="Left" VerticalAlignment="Center" 
                                       Fill="Transparent" Stroke="{DynamicResource TextFillColorSecondaryBrush}" 
                                       StrokeThickness="1" RadiusX="1" RadiusY="1"/>
                            <Rectangle Width="8" Height="14" HorizontalAlignment="Right" VerticalAlignment="Center" 
                                       RadiusX="1" RadiusY="1">
                                <Rectangle.Style>
                                    <Style TargetType="Rectangle">
                                        <!-- Default: hollow (panel closed) -->
                                        <Setter Property="Fill" Value="Transparent"/>
                                        <Setter Property="Stroke" Value="{DynamicResource TextFillColorSecondaryBrush}"/>
                                        <Setter Property="StrokeThickness" Value="1"/>
                                        <Style.Triggers>
                                            <!-- Filled when panel is open -->
                                            <DataTrigger Binding="{Binding IsRightPanelVisible}" Value="True">
                                                <Setter Property="Fill" Value="{DynamicResource AccentFillColorDefaultBrush}"/>
                                                <Setter Property="Stroke" Value="{DynamicResource AccentFillColorDefaultBrush}"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Rectangle.Style>
                            </Rectangle>
                        </Grid>
                    </ui:Button.Content>
                    <ui:Button.Style>
                        <Style TargetType="ui:Button">
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="BorderThickness" Value="0"/>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource SubtleFillColorSecondaryBrush}"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </ui:Button.Style>
                </ui:Button>
            </StackPanel>
        </Grid>

        <!-- Main Content -->
        <Grid Grid.Row="2" Margin="10,0" x:Name="MainContentGrid">
            <Grid.ColumnDefinitions>
                <!-- Left Panel (Directory Tree) -->
                <ColumnDefinition x:Name="LeftPanelColumn" Width="250" MinWidth="0"/>
                <!-- Shared Left Splitter -->
                <ColumnDefinition x:Name="LeftSplitterColumn" Width="Auto" MinWidth="0"/>
                <!-- Center Panel (File List) - Always visible, takes remaining space -->
                <ColumnDefinition x:Name="CenterPanelColumn" Width="*"/>
                <!-- Shared Right Splitter -->
                <ColumnDefinition x:Name="RightSplitterColumn" Width="Auto" MinWidth="0"/>
                <!-- Right Panel (Preview) -->
                <ColumnDefinition x:Name="RightPanelColumn" Width="300" MinWidth="0"/>
            </Grid.ColumnDefinitions>

            <!-- Left Panel - Directory Tree -->
            <Border Grid.Column="0" Background="{DynamicResource ApplicationBackgroundBrush}" 
                    BorderBrush="{DynamicResource ControlStrongStrokeColorDefaultBrush}" 
                    BorderThickness="1,1,0,1" CornerRadius="8,0,0,8"
                    Visibility="{Binding IsLeftPanelVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    
                    <TextBlock Grid.Row="0" Text="文件夹" FontWeight="Bold" Margin="10" 
                               Foreground="{DynamicResource TextFillColorPrimaryBrush}"/>
                    
                    <TreeView Grid.Row="1" x:Name="DirectoryTreeView" 
                              Background="Transparent" BorderThickness="0"
                              ItemsSource="{Binding DirectoryTree}"
                              SelectedItemChanged="DirectoryTreeView_SelectedItemChanged"
                              ItemContainerStyle="{StaticResource DirectoryTreeViewItemStyle}">
                        <TreeView.Resources>
                            <!-- Add BooleanToVisibilityConverter -->
                            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
                        </TreeView.Resources>
                        <TreeView.ItemTemplate>
                            <HierarchicalDataTemplate ItemsSource="{Binding SubDirectories}">
                                <StackPanel Orientation="Horizontal">
                                    <!-- Colorful folder icon -->
                                    <ui:SymbolIcon Symbol="Folder24" Margin="0,0,5,0" 
                                                   Foreground="#FFE6A23C"/>
                                    
                                    <!-- Directory name -->
                                    <TextBlock Text="{Binding Name}" VerticalAlignment="Center"
                                               Foreground="{DynamicResource TextFillColorPrimaryBrush}"/>
                                    
                                    <!-- Loading indicator with color -->
                                    <ui:ProgressRing Width="14" Height="14" Margin="5,0,0,0"
                                                     IsIndeterminate="True"
                                                     Foreground="#FF409EFF"
                                                     Visibility="{Binding IsLoadingChildren, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                    
                                    <!-- Error indicator -->
                                    <ui:SymbolIcon Symbol="ErrorCircle24" Margin="5,0,0,0" 
                                                   Foreground="#FFF56C6C" 
                                                   Width="14" Height="14"
                                                   Visibility="{Binding HasLoadError, Converter={StaticResource BooleanToVisibilityConverter}}"
                                                   ToolTip="{Binding LoadErrorMessage}"/>
                                </StackPanel>
                            </HierarchicalDataTemplate>
                        </TreeView.ItemTemplate>
                    </TreeView>
                </Grid>
            </Border>

            <GridSplitter Grid.Column="1" Width="5" HorizontalAlignment="Stretch" 
                          Background="{DynamicResource ControlStrongStrokeColorDefaultBrush}"
                          DragCompleted="LeftGridSplitter_DragCompleted">
                <GridSplitter.Style>
                    <Style TargetType="GridSplitter">
                        <Setter Property="Visibility" Value="Visible"/>
                        <Style.Triggers>
                            <!-- Hide when left panel is hidden -->
                            <DataTrigger Binding="{Binding IsLeftPanelVisible}" Value="False">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </GridSplitter.Style>
            </GridSplitter>

            <!-- Center Panel - File List (Always visible) -->
            <Border Grid.Column="2" Background="{DynamicResource ApplicationBackgroundBrush}" 
                    BorderBrush="{DynamicResource ControlStrongStrokeColorDefaultBrush}">
                <Border.Style>
                    <Style TargetType="Border">
                        <!-- Default style when both panels are visible -->
                        <Setter Property="BorderThickness" Value="0,1,0,1"/>
                        <Setter Property="CornerRadius" Value="0"/>
                        <Style.Triggers>
                            <!-- Left panel hidden, right panel visible -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsLeftPanelVisible}" Value="False"/>
                                    <Condition Binding="{Binding IsRightPanelVisible}" Value="True"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="BorderThickness" Value="1,1,0,1"/>
                                <Setter Property="CornerRadius" Value="8,0,0,8"/>
                            </MultiDataTrigger>
                            <!-- Left panel visible, right panel hidden -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsLeftPanelVisible}" Value="True"/>
                                    <Condition Binding="{Binding IsRightPanelVisible}" Value="False"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="BorderThickness" Value="0,1,1,1"/>
                                <Setter Property="CornerRadius" Value="0,8,8,0"/>
                            </MultiDataTrigger>
                            <!-- Both panels hidden (center only) -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsLeftPanelVisible}" Value="False"/>
                                    <Condition Binding="{Binding IsRightPanelVisible}" Value="False"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="CornerRadius" Value="8"/>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <!-- Address Bar / Breadcrumb Navigation -->
                    <Grid Grid.Row="0" Margin="10">
                        <!-- Windows Explorer Style Address Bar Container -->
                        <Border x:Name="AddressBarContainer" 
                                Background="{DynamicResource ControlFillColorDefaultBrush}"
                                BorderBrush="{DynamicResource ControlStrokeColorDefaultBrush}"
                                BorderThickness="1"
                                CornerRadius="4"
                                MinHeight="32"
                                Cursor="IBeam"
                                MouseLeftButtonUp="AddressBarContainer_MouseLeftButtonUp"
                                ToolTip="点击编辑地址，或使用 Ctrl+L / Alt+D / F2">
                            <Border.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="编辑地址栏" Command="{Binding TogglePathEditCommand}">
                                        <MenuItem.Icon>
                                            <ui:SymbolIcon Symbol="Edit24"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <Separator/>
                                    <MenuItem Header="复制地址" Click="CopyCurrentPath_Click">
                                        <MenuItem.Icon>
                                            <ui:SymbolIcon Symbol="Copy24"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem Header="在新窗口中打开" Click="OpenInNewWindow_Click">
                                        <MenuItem.Icon>
                                            <ui:SymbolIcon Symbol="WindowNew24"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                </ContextMenu>
                            </Border.ContextMenu>
                            <Border.Style>
                                <Style TargetType="Border">
                                    <Setter Property="BorderBrush" Value="{DynamicResource ControlStrokeColorDefaultBrush}"/>
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="BorderBrush" Value="{DynamicResource ControlStrokeColorSecondaryBrush}"/>
                                        </Trigger>
                                        <DataTrigger Binding="{Binding IsPathEditing}" Value="True">
                                            <Setter Property="BorderBrush" Value="{DynamicResource AccentFillColorDefaultBrush}"/>
                                            <Setter Property="BorderThickness" Value="2"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                            <Grid>
                                <!-- Breadcrumb Bar Mode -->
                                <ScrollViewer x:Name="BreadcrumbScrollViewer"
                                              HorizontalScrollBarVisibility="Auto" 
                                              VerticalScrollBarVisibility="Disabled"
                                              PanningMode="HorizontalOnly"
                                              Margin="8,4"
                                              Visibility="{Binding IsPathEditing, Converter={StaticResource InverseBooleanToVisibilityConverter}}">
                                    <ui:BreadcrumbBar x:Name="BreadcrumbBar"
                                                      ItemsSource="{Binding Folders, Mode=OneWay}"
                                                      Background="Transparent"
                                                      BorderThickness="0">
                                        <ui:BreadcrumbBar.ItemTemplate>
                                            <DataTemplate DataType="{x:Type models:Folder}">
                                                <Button Content="{Binding Name, Mode=OneTime}" 
                                                        Background="Transparent" 
                                                        BorderThickness="0"
                                                        Padding="8,4"
                                                        Margin="0,1"
                                                        Command="{Binding DataContext.NavigateToFolderCommand, RelativeSource={RelativeSource AncestorType=ui:FluentWindow}}"
                                                        CommandParameter="{Binding}"
                                                        Cursor="Hand"
                                                        FontSize="13">
                                                    <Button.Style>
                                                        <Style TargetType="Button">
                                                            <Setter Property="Background" Value="Transparent"/>
                                                            <Setter Property="BorderThickness" Value="0"/>
                                                            <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}"/>
                                                            <Setter Property="Template">
                                                                <Setter.Value>
                                                                    <ControlTemplate TargetType="Button">
                                                                        <Border Background="{TemplateBinding Background}" 
                                                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                                                BorderThickness="{TemplateBinding BorderThickness}"
                                                                                Padding="{TemplateBinding Padding}"
                                                                                CornerRadius="3">
                                                                            <ContentPresenter HorizontalAlignment="Center" 
                                                                                              VerticalAlignment="Center"/>
                                                                        </Border>
                                                                    </ControlTemplate>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Style.Triggers>
                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                    <Setter Property="Background" Value="{DynamicResource SubtleFillColorSecondaryBrush}"/>
                                                                </Trigger>
                                                                <Trigger Property="IsPressed" Value="True">
                                                                    <Setter Property="Background" Value="{DynamicResource SubtleFillColorTertiaryBrush}"/>
                                                                </Trigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </Button.Style>
                                                </Button>
                                            </DataTemplate>
                                        </ui:BreadcrumbBar.ItemTemplate>
                                    </ui:BreadcrumbBar>
                                </ScrollViewer>
                                
                                <!-- Path Text Box Mode -->
                                <ui:TextBox x:Name="AddressBar" 
                                            PlaceholderText="输入路径..." 
                                            Text="{Binding CurrentPath, UpdateSourceTrigger=PropertyChanged}"
                                            Visibility="{Binding IsPathEditing, Converter={StaticResource BooleanToVisibilityConverter}}"
                                            KeyDown="AddressBar_KeyDown"
                                            LostFocus="AddressBar_LostFocus"
                                            Loaded="AddressBar_Loaded"
                                            TextChanged="AddressBar_TextChanged"
                                            Background="Transparent"
                                            BorderThickness="0"
                                            Margin="8,4"
                                            FontSize="13"
                                            VerticalAlignment="Center"/>
                                
                                <!-- Path Suggestions Popup -->
                                <Popup x:Name="PathSuggestionsPopup" 
                                       PlacementTarget="{x:Reference AddressBar}"
                                       Placement="Bottom"
                                       IsOpen="{Binding ShowPathSuggestions}"
                                       AllowsTransparency="True"
                                       PopupAnimation="Slide">
                                    <Border Background="{DynamicResource ApplicationBackgroundBrush}"
                                            BorderBrush="{DynamicResource ControlStrokeColorDefaultBrush}"
                                            BorderThickness="1"
                                            CornerRadius="4"
                                            MaxHeight="200">
                                        <ListBox ItemsSource="{Binding PathSuggestions}"
                                                 Background="Transparent"
                                                 BorderThickness="0"
                                                 SelectionChanged="PathSuggestions_SelectionChanged"
                                                 MaxHeight="180">
                                            <ListBox.ItemTemplate>
                                                <DataTemplate>
                                                    <StackPanel Orientation="Horizontal" Margin="4,2">
                                                        <ui:SymbolIcon Symbol="Folder24" 
                                                                       Margin="0,0,8,0"
                                                                       FontSize="14"
                                                                       Foreground="#FFE6A23C"/>
                                                        <TextBlock Text="{Binding}" 
                                                                   VerticalAlignment="Center"
                                                                   FontSize="12"/>
                                                    </StackPanel>
                                                </DataTemplate>
                                            </ListBox.ItemTemplate>
                                            <ListBox.ItemContainerStyle>
                                                <Style TargetType="ListBoxItem">
                                                    <Setter Property="Padding" Value="8,4"/>
                                                    <Style.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Background" Value="{DynamicResource SubtleFillColorSecondaryBrush}"/>
                                                        </Trigger>
                                                        <Trigger Property="IsSelected" Value="True">
                                                            <Setter Property="Background" Value="{DynamicResource AccentFillColorDefaultBrush}"/>
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ListBox.ItemContainerStyle>
                                        </ListBox>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Border>
                    </Grid>

                    <!-- Toolbar -->
                    <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="10,0,10,10">
                        <ui:Button Content="返回" Icon="ArrowLeft24" Click="BackButton_Click" Margin="0,0,5,0"/>
                        <!-- <ui:Button Content="前进" Icon="ArrowRight24" Click="ForwardButton_Click" Margin="0,0,5,0"/> -->
                        <ui:Button Content="上级" Icon="ArrowUp24" Click="UpButton_Click" Margin="0,0,5,0"/>
                        <ui:Button Content="刷新" Icon="ArrowClockwise24" Click="RefreshButton_Click" Margin="0,0,5,0"/>
                        
                        <!-- Search button -->
                        <Separator Margin="5,0"/>
                        <ui:Button Content="搜索" Icon="Search24" Command="{Binding ShowSearchWindowCommand}" 
                                   Margin="0,0,5,0" ToolTip="搜索文件和文件夹 (Ctrl+F)"/>
                        
                        <!-- File operation buttons with keyboard shortcuts -->
                        <Separator Margin="5,0"/>
                        <ui:Button Content="复制" Icon="Copy24" Command="{Binding CopyFilesCommand}" 
                                   Margin="0,0,5,0" ToolTip="复制选中项 (Ctrl+C)"/>
                        <ui:Button Content="剪切" Icon="Cut24" Command="{Binding CutFilesCommand}" 
                                   Margin="0,0,5,0" ToolTip="剪切选中项 (Ctrl+X)"/>
                        <ui:Button Content="粘贴" Icon="ClipboardPaste24" Command="{Binding PasteFilesCommand}" 
                                   Margin="0,0,5,0" ToolTip="粘贴 (Ctrl+V)"/>
                        <ui:Button Content="删除" Icon="Delete24" Command="{Binding DeleteFilesCommand}" 
                                   ToolTip="删除选中项 (Delete)"/>
                    </StackPanel>

                    <!-- File List -->
                    <ui:DataGrid Grid.Row="2" x:Name="FileDataGrid" 
                                 ItemsSource="{Binding Files}"
                                 SelectedItem="{Binding SelectedFile}"
                                 Background="Transparent" BorderThickness="0"
                                 Margin="10,5,10,10"
                                 MouseDoubleClick="FileListView_MouseDoubleClick"
                                 MouseDown="FileListView_MouseDown"
                                 SelectionChanged="FileListView_SelectionChanged"
                                 KeyDown="FileListView_KeyDown"
                                 AutoGenerateColumns="False"
                                 HeadersVisibility="Column"
                                 GridLinesVisibility="None"
                                 CanUserAddRows="False"
                                 CanUserDeleteRows="False"
                                 CanUserReorderColumns="True"
                                 CanUserResizeColumns="True"
                                 CanUserResizeRows="False"
                                 CanUserSortColumns="True"
                                 IsReadOnly="True"
                                 RowStyle="{StaticResource FileDataGridRowStyle}"
                                 CellStyle="{StaticResource FileDataGridCellStyle}">
                        <ui:DataGrid.ContextMenu>
                            <ContextMenu>
                                <MenuItem Header="打开" Click="ContextMenu_Open">
                                    <MenuItem.Icon>
                                        <ui:SymbolIcon Symbol="Open24"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <Separator/>
                                <MenuItem Header="在资源管理器中查看" Command="{Binding OpenInExplorerCommand}">
                                    <MenuItem.Icon>
                                        <ui:SymbolIcon Symbol="FolderOpen24"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <Separator/>
                                <MenuItem Header="重命名" Command="{Binding ShowRenameDialogCommand}">
                                    <MenuItem.Icon>
                                        <ui:SymbolIcon Symbol="Edit24"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <Separator/>
                                <MenuItem Header="复制" Command="{Binding CopyFilesCommand}">
                                    <MenuItem.Icon>
                                        <ui:SymbolIcon Symbol="Copy24"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Header="剪切" Command="{Binding CutFilesCommand}">
                                    <MenuItem.Icon>
                                        <ui:SymbolIcon Symbol="Cut24"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Header="粘贴" Command="{Binding PasteFilesCommand}">
                                    <MenuItem.Icon>
                                        <ui:SymbolIcon Symbol="ClipboardPaste24"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <Separator/>
                                <MenuItem Header="删除" Command="{Binding DeleteFilesCommand}">
                                    <MenuItem.Icon>
                                        <ui:SymbolIcon Symbol="Delete24"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <Separator/>
                                <MenuItem Command="{Binding CopyFilePathCommand}">
                                    <MenuItem.Icon>
                                        <ui:SymbolIcon Symbol="Link24"/>
                                    </MenuItem.Icon>
                                    <MenuItem.Style>
                                        <Style TargetType="MenuItem">
                                            <Setter Property="Header" Value="复制文件地址"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding SelectedFile.IsDirectory}" Value="True">
                                                    <Setter Property="Header" Value="复制文件夹地址"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </MenuItem.Style>
                                </MenuItem>
                                <MenuItem Header="属性" Command="{Binding ShowPropertiesCommand}">
                                    <MenuItem.Icon>
                                        <ui:SymbolIcon Symbol="Settings24"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Header="分析文件夹" Command="{Binding AnalyzeFolderCommand}" Visibility="{Binding SelectedFile.IsDirectory, Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <MenuItem.Icon>
                                        <ui:SymbolIcon Symbol="Folder24"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                            </ContextMenu>
                        </ui:DataGrid.ContextMenu>
                        <ui:DataGrid.Columns>
                            <DataGridTemplateColumn Header="名称" Width="200" SortMemberPath="Name">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <Grid>
                                            <!-- Normal display -->
                                            <StackPanel Orientation="Horizontal" Margin="5,0,0,0"
                                                       Visibility="{Binding DataContext.IsRenaming, RelativeSource={RelativeSource AncestorType=ui:DataGrid}, Converter={StaticResource InverseBooleanToVisibilityConverter}}">
                                                <ui:SymbolIcon Symbol="{Binding Icon}" Margin="0,0,5,0" 
                                                               Foreground="{Binding IconColor}"/>
                                                <TextBlock Text="{Binding DisplayName}" 
                                                           TextTrimming="CharacterEllipsis"
                                                           TextAlignment="Left"
                                                           HorizontalAlignment="Left"
                                                           VerticalAlignment="Center"
                                                           ToolTip="{Binding Name}"/>
                                            </StackPanel>
                                            
                                            <!-- Rename mode -->
                                            <StackPanel Orientation="Horizontal" Margin="5,0,0,0"
                                                       Visibility="{Binding DataContext.IsRenaming, RelativeSource={RelativeSource AncestorType=ui:DataGrid}, Converter={StaticResource BooleanToVisibilityConverter}}">
                                                <ui:SymbolIcon Symbol="{Binding Icon}" Margin="0,0,5,0" 
                                                               Foreground="{Binding IconColor}"/>
                                                <Grid>
                                                    <!-- Show original name if not the item being renamed -->
                                                    <TextBlock Text="{Binding DisplayName}"
                                                               TextTrimming="CharacterEllipsis"
                                                               TextAlignment="Left"
                                                               HorizontalAlignment="Left"
                                                               VerticalAlignment="Center"
                                                               ToolTip="{Binding Name}">
                                                        <TextBlock.Style>
                                                            <Style TargetType="TextBlock">
                                                                <Setter Property="Visibility" Value="Visible"/>
                                                                <Style.Triggers>
                                                                    <DataTrigger Value="True">
                                                                        <DataTrigger.Binding>
                                                                            <MultiBinding Converter="{StaticResource EqualityConverter}">
                                                                                <Binding/>
                                                                                <Binding Path="DataContext.RenamingFile" RelativeSource="{RelativeSource AncestorType=ui:DataGrid}"/>
                                                                            </MultiBinding>
                                                                        </DataTrigger.Binding>
                                                                        <Setter Property="Visibility" Value="Collapsed"/>
                                                                    </DataTrigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </TextBlock.Style>
                                                    </TextBlock>
                                                    
                                                    <!-- Show textbox for the item being renamed -->
                                                    <ui:TextBox x:Name="RenameTextBox" 
                                                               Text="{Binding DataContext.NewFileName, RelativeSource={RelativeSource AncestorType=ui:DataGrid}, UpdateSourceTrigger=PropertyChanged}"
                                                               KeyDown="RenameTextBox_KeyDown"
                                                               LostFocus="RenameTextBox_LostFocus"
                                                               Loaded="RenameTextBox_Loaded">
                                                        <ui:TextBox.Style>
                                                            <Style TargetType="ui:TextBox">
                                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                                <Style.Triggers>
                                                                    <DataTrigger Value="True">
                                                                        <DataTrigger.Binding>
                                                                            <MultiBinding Converter="{StaticResource EqualityConverter}">
                                                                                <Binding/>
                                                                                <Binding Path="DataContext.RenamingFile" RelativeSource="{RelativeSource AncestorType=ui:DataGrid}"/>
                                                                            </MultiBinding>
                                                                        </DataTrigger.Binding>
                                                                        <Setter Property="Visibility" Value="Visible"/>
                                                                    </DataTrigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </ui:TextBox.Style>
                                                    </ui:TextBox>
                                                </Grid>
                                            </StackPanel>
                                        </Grid>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTextColumn Header="大小" Width="100" Binding="{Binding SizeString}" SortMemberPath="Size"/>
                            <DataGridTextColumn Header="类型" Width="100" Binding="{Binding Type}" SortMemberPath="Type"/>
                            <DataGridTextColumn Header="修改时间" Width="150" Binding="{Binding ModifiedTime}" SortMemberPath="ModifiedTime"/>
                        </ui:DataGrid.Columns>
                    </ui:DataGrid>
                </Grid>
            </Border>

            <GridSplitter Grid.Column="3" Width="5" HorizontalAlignment="Stretch" 
                          Background="{DynamicResource ControlStrongStrokeColorDefaultBrush}"
                          DragCompleted="RightGridSplitter_DragCompleted">
                <GridSplitter.Style>
                    <Style TargetType="GridSplitter">
                        <Setter Property="Visibility" Value="Visible"/>
                        <Style.Triggers>
                            <!-- Hide when right panel is hidden -->
                            <DataTrigger Binding="{Binding IsRightPanelVisible}" Value="False">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </GridSplitter.Style>
            </GridSplitter>

            <!-- Right Panel - File Preview -->
            <Border Grid.Column="4" Background="{DynamicResource ApplicationBackgroundBrush}" 
                    BorderBrush="{DynamicResource ControlStrongStrokeColorDefaultBrush}" 
                    BorderThickness="0,1,1,1" CornerRadius="0,8,8,0"
                    Visibility="{Binding IsRightPanelVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    
                    <!-- Size Calculation Progress -->
                    <StackPanel Grid.Row="0" Margin="10,10,10,5" 
                                Visibility="{Binding IsSizeCalculating, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <ui:ProgressRing IsIndeterminate="True" Width="20" Height="20" Margin="0,0,0,5"/>
                        <TextBlock Text="{Binding SizeCalculationProgress}" FontSize="11"
                                   Foreground="{DynamicResource TextFillColorSecondaryBrush}"
                                   TextTrimming="CharacterEllipsis"/>
                    </StackPanel>
                    
                    <ScrollViewer Grid.Row="1" x:Name="PreviewScrollViewer" Margin="10">
                        <!-- Loading Overlay -->
                        <Grid>
                            <ContentPresenter Content="{Binding PreviewContent}"/>
                            
                            <!-- Loading Indicator with better styling -->
                            <Border Background="#80000000" 
                                    Visibility="{Binding IsPreviewLoading, Converter={StaticResource BooleanToVisibilityConverter}}"
                                    CornerRadius="5">
                                <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <ui:ProgressRing IsIndeterminate="True" Width="40" Height="40" Margin="0,0,0,10"/>
                                    <TextBlock Text="正在加载预览..." Foreground="White" HorizontalAlignment="Center" FontSize="14"/>
                                    <TextBlock Text="大文件可能需要较长时间..." Foreground="LightGray" HorizontalAlignment="Center" FontSize="11" Margin="0,5,0,0"/>
                                </StackPanel>
                            </Border>
                        </Grid>
                    </ScrollViewer>
                </Grid>
            </Border>
        </Grid>

        <!-- Status Bar -->
        <Border Grid.Row="3" Background="{DynamicResource ApplicationBackgroundBrush}" 
                BorderBrush="{DynamicResource ControlStrongStrokeColorDefaultBrush}" 
                BorderThickness="0" Height="30">
            <TextBlock Text="{Binding StatusText}" VerticalAlignment="Center" Margin="10,0" 
                       Foreground="{DynamicResource TextFillColorSecondaryBrush}"/>
        </Border>
    </Grid>
</ui:FluentWindow>